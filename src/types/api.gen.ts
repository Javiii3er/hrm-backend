/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Iniciar sesión
         * @description Autentica un usuario y devuelve tokens JWT
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Login exitoso */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponseWrapper"];
                    };
                };
                /** @description Credenciales inválidas */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Error de validación */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ValidationError"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener perfil de usuario
         * @description Retorna la información del usuario autenticado
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Perfil obtenido */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserProfileWrapper"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refrescar token
         * @description Obtiene un nuevo access token usando el refresh token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RefreshTokenRequest"];
                };
            };
            responses: {
                /** @description Token refrescado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RefreshTokenWrapper"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar empleados
         * @description Retorna lista paginada de empleados con filtros
         */
        get: {
            parameters: {
                query?: {
                    /** @description Número de página */
                    page?: number;
                    /** @description Tamaño de página */
                    pageSize?: number;
                    /** @description Búsqueda por nombre, email o cédula */
                    q?: string;
                    /** @description Filtrar por departamento */
                    department?: string;
                    /** @description Filtrar por estado */
                    status?: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "VACATION";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de empleados */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmployeeListWrapper"];
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        /**
         * Crear empleado
         * @description Crea un nuevo empleado en el sistema
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EmployeeCreate"];
                };
            };
            responses: {
                /** @description Empleado creado */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmployeeWrapper"];
                    };
                };
                /** @description Conflicto (cédula o email duplicado) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                422: components["responses"]["ValidationError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener empleado
         * @description Retorna los detalles de un empleado específico
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID del empleado */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Detalles del empleado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmployeeDetailWrapper"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        /**
         * Actualizar empleado
         * @description Actualiza la información de un empleado
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["EmployeeUpdate"];
                };
            };
            responses: {
                /** @description Empleado actualizado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["EmployeeWrapper"];
                    };
                };
                404: components["responses"]["NotFound"];
                /** @description Conflicto (cédula o email duplicado) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Eliminar empleado
         * @description Elimina un empleado del sistema
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Empleado eliminado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                404: components["responses"]["NotFound"];
                /** @description No se puede eliminar (tiene documentos o usuario) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/{id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar documentos
         * @description Retorna lista de documentos de un empleado
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de documentos */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentListWrapper"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Subir documento
         * @description Sube un documento al expediente de un empleado
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description ID del empleado */
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": {
                        /**
                         * Format: binary
                         * @description Archivo a subir
                         */
                        document?: string;
                        /** @description Etiquetas separadas por comas */
                        tags?: string;
                        /** @description Descripción del documento */
                        description?: string;
                    };
                };
            };
            responses: {
                /** @description Documento subido */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentWrapper"];
                    };
                };
                /** @description Archivo demasiado grande */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Tipo de archivo no permitido */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payroll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar nóminas
         * @description Retorna lista de periodos de nómina
         */
        get: {
            parameters: {
                query?: {
                    /** @description Fecha de inicio del periodo */
                    startDate?: string;
                    /** @description Fecha de fin del periodo */
                    endDate?: string;
                    /** @description Filtrar por departamento */
                    department?: string;
                    status?: "DRAFT" | "FINALIZED" | "PAID";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de nóminas */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PayrollListWrapper"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Crear nómina
         * @description Crea un nuevo periodo de nómina
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PayrollCreate"];
                };
            };
            responses: {
                /** @description Nómina creada */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PayrollWrapper"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payroll/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener detalle de nómina
         * @description Devuelve la nómina con items y totales
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Nómina encontrada */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PayrollDetailWrapper"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payroll/{id}/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generar items de nómina
         * @description Genera los items de nómina para un periodo
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["GeneratePayrollRequest"];
                };
            };
            responses: {
                /** @description Items generados */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PayrollDetailWrapper"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payroll/{id}/finalize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Finalizar nómina
         * @description Cambia el estado a FINALIZED y bloquea modificaciones
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Nómina finalizada */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PayrollWrapper"];
                    };
                };
                404: components["responses"]["NotFound"];
                /** @description No se puede finalizar (ya FINALIZED o PAID) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payroll/employee/{employeeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Crear nómina individual para un empleado
         * @description Crea un periodo de nómina para un solo empleado
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    employeeId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["PayrollCreate"];
                };
            };
            responses: {
                /** @description Nómina individual creada */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PayrollWrapper"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar usuarios
         * @description Retorna lista de usuarios del sistema (solo ADMIN)
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                    role?: "ADMIN" | "RRHH" | "EMPLEADO";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de usuarios */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserListWrapper"];
                    };
                };
                403: components["responses"]["Forbidden"];
            };
        };
        put?: never;
        /**
         * Crear usuario
         * @description Crea un usuario del sistema (solo ADMIN)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserCreate"];
                };
            };
            responses: {
                /** @description Usuario creado */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserWrapper"];
                    };
                };
                /** @description Conflicto (email ya en uso) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                422: components["responses"]["ValidationError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener usuario por ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Usuario encontrado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserWrapper"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        /**
         * Actualizar usuario
         * @description Actualiza email, role o employeeId asociado
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserUpdate"];
                };
            };
            responses: {
                /** @description Usuario actualizado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserWrapper"];
                    };
                };
                404: components["responses"]["NotFound"];
                /** @description Conflicto (email ya en uso) */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        post?: never;
        /**
         * Eliminar usuario
         * @description Elimina un usuario por ID (solo ADMIN)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Usuario eliminado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Cambiar contraseña de un usuario
         * @description Solo ADMIN o el mismo usuario
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChangePasswordRequest"];
                };
            };
            responses: {
                /** @description Contraseña cambiada */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                404: components["responses"]["NotFound"];
                422: components["responses"]["ValidationError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtener estadísticas de usuarios
         * @description Totales por rol y estados asociados
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Estadísticas de usuarios */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserStatsWrapper"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Listar documentos
         * @description Lista paginada y filtrable de documentos
         */
        get: {
            parameters: {
                query?: {
                    page?: number;
                    pageSize?: number;
                    /** @description Filtrar por empleado */
                    employeeId?: string;
                    /** @description Búsqueda por filename/description */
                    q?: string;
                    /** @description Lista separada por comas */
                    tags?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Lista de documentos */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentListWrapper"];
                    };
                };
            };
        };
        put?: never;
        /**
         * Subir documento
         * @description Sube un documento asociado a un empleado
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "multipart/form-data": components["schemas"]["DocumentUpload"];
                };
            };
            responses: {
                /** @description Documento subido */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentWrapper"];
                    };
                };
                /** @description Archivo demasiado grande */
                413: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Tipo de archivo no permitido */
                415: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                422: components["responses"]["ValidationError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Eliminar documento por ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Documento eliminado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SuccessResponse"];
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/documents/{id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Descargar documento
         * @description Devuelve el binario del archivo
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Archivo descargado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/octet-stream": string;
                    };
                };
                404: components["responses"]["NotFound"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Obtener perfil autenticado */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Perfil obtenido */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserWrapper"];
                    };
                };
                401: components["responses"]["Unauthorized"];
            };
        };
        /** Actualizar perfil autenticado */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProfileUpdateRequest"];
                };
            };
            responses: {
                /** @description Perfil actualizado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UserWrapper"];
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generar reporte
         * @description Genera un reporte (PDF/CSV) y devuelve metadatos/URL de descarga
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ReportRequest"];
                };
            };
            responses: {
                /** @description Reporte generado */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReportResponseWrapper"];
                    };
                };
                422: components["responses"]["ValidationError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Listar plantillas de reportes */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Plantillas disponibles */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ReportTemplateListWrapper"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        MetaPagination: {
            totalItems: number;
            page: number;
            pageSize: number;
            totalPages: number;
        };
        SuccessResponse: {
            /** @example true */
            success: boolean;
            data: Record<string, never>;
            message?: string;
            meta?: components["schemas"]["MetaPagination"] | Record<string, never>;
        };
        ErrorResponse: {
            /** @example false */
            success: boolean;
            error: {
                /** @example VALIDATION_ERROR */
                code: string;
                /** @example Error de validación */
                message: string;
                details?: Record<string, never>;
            };
        };
        ValidationError: components["schemas"]["ErrorResponse"] & {
            error?: {
                /** @example VALIDATION_ERROR */
                code?: string;
                /** @example Error de validación */
                message?: string;
                /** @description Campo opcional con detalles específicos de los campos fallidos. */
                details?: Record<string, never>;
            };
        };
        LoginRequest: {
            /**
             * Format: email
             * @example admin@hrm.com
             */
            email: string;
            /** @example admin123 */
            password: string;
        };
        AuthResponse: {
            accessToken: string;
            refreshToken: string;
            user: components["schemas"]["User"];
            expiresIn: number;
        };
        AuthResponseWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["AuthResponse"];
        };
        RefreshTokenRequest: {
            refreshToken: string;
        };
        RefreshTokenResponse: {
            accessToken: string;
            expiresIn: number;
        };
        RefreshTokenWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["RefreshTokenResponse"];
        };
        EmployeeCreate: {
            /** @example 1234567890101 */
            nationalId: string;
            /** @example María */
            firstName: string;
            /** @example García */
            lastName: string;
            /**
             * Format: email
             * @example maria.garcia@empresa.com
             */
            email: string;
            /** @example 1234-5678 */
            phone?: string;
            /** Format: uuid */
            departmentId: string;
            /** @example Gerente de RH */
            position?: string;
            /** Format: date */
            hireDate?: string;
            /**
             * @default ACTIVE
             * @enum {string}
             */
            status: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "VACATION";
        };
        EmployeeUpdate: {
            nationalId?: string;
            firstName?: string;
            lastName?: string;
            /** Format: email */
            email?: string;
            phone?: string;
            /** Format: uuid */
            departmentId?: string;
            position?: string;
            /** Format: date */
            hireDate?: string;
            /** @enum {string} */
            status?: "ACTIVE" | "INACTIVE" | "SUSPENDED" | "VACATION";
        };
        Employee: {
            /** Format: uuid */
            id: string;
            nationalId: string;
            firstName: string;
            lastName: string;
            email: string;
            phone?: string;
            position?: string;
            /** Format: date */
            hireDate?: string;
            status: string;
            department: components["schemas"]["Department"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        EmployeeDetail: components["schemas"]["Employee"] & {
            documents?: components["schemas"]["Document"][];
            user?: components["schemas"]["User"];
        };
        EmployeeWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["Employee"];
        };
        EmployeeDetailWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["EmployeeDetail"];
        };
        EmployeeListWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["Employee"][];
            meta?: components["schemas"]["MetaPagination"];
        };
        User: {
            /** Format: uuid */
            id: string;
            /** Format: email */
            email: string;
            /** @enum {string} */
            role: "ADMIN" | "RRHH" | "EMPLEADO";
            employee?: components["schemas"]["Employee"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        UserProfile: components["schemas"]["User"] & {
            auditLogs?: Record<string, never>[];
        };
        UserProfileWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["UserProfile"];
        };
        UserListWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["User"][];
            meta?: components["schemas"]["MetaPagination"];
        };
        UserWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["User"];
        };
        UserCreate: {
            /** Format: email */
            email: string;
            password: string;
            /** @enum {string} */
            role: "ADMIN" | "RRHH" | "EMPLEADO";
            /**
             * Format: uuid
             * @description Asociar a empleado existente (opcional)
             */
            employeeId?: string;
        };
        UserUpdate: {
            /** Format: email */
            email?: string;
            /** @enum {string} */
            role?: "ADMIN" | "RRHH" | "EMPLEADO";
            /** Format: uuid */
            employeeId?: string;
        };
        ChangePasswordRequest: {
            /** @description Requerido si el propio usuario cambia su contraseña */
            currentPassword?: string;
            newPassword: string;
        };
        UserStats: {
            total: number;
            /**
             * @example {
             *       "ADMIN": 1,
             *       "RRHH": 2,
             *       "EMPLEADO": 10
             *     }
             */
            byRole?: {
                [key: string]: number;
            };
        };
        UserStatsWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["UserStats"];
        };
        Department: {
            /** Format: uuid */
            id: string;
            name: string;
            description?: string;
        };
        Document: {
            /** Format: uuid */
            id: string;
            filename: string;
            mimeType: string;
            size: number;
            tags?: string[];
            description?: string;
            uploadedBy?: components["schemas"]["User"];
            /** Format: date-time */
            createdAt: string;
        };
        DocumentWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["Document"];
        };
        DocumentListWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["Document"][];
            meta?: components["schemas"]["MetaPagination"];
        };
        DocumentUpload: {
            /** Format: binary */
            document: string;
            /** Format: uuid */
            employeeId: string;
            description?: string;
            /** @description Etiquetas separadas por comas o JSON array como string */
            tags?: string;
        };
        PayrollCreate: {
            /** Format: date */
            periodStart: string;
            /** Format: date */
            periodEnd: string;
            /** Format: uuid */
            departmentId?: string;
            description?: string;
        };
        Payroll: {
            /** Format: uuid */
            id: string;
            /** Format: date */
            periodStart: string;
            /** Format: date */
            periodEnd: string;
            description?: string;
            /** @enum {string} */
            status: "DRAFT" | "FINALIZED" | "PAID";
            department?: components["schemas"]["Department"];
            items?: components["schemas"]["PayrollItem"][];
            /** Format: date-time */
            createdAt: string;
        };
        PayrollWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["Payroll"];
        };
        PayrollDetail: components["schemas"]["Payroll"] & {
            totals?: {
                totalGross: number;
                totalNet: number;
                totalDeductions: number;
            };
        };
        PayrollDetailWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["PayrollDetail"];
        };
        PayrollItem: {
            /** Format: uuid */
            id: string;
            employee: components["schemas"]["Employee"];
            grossAmount: number;
            netAmount: number;
            deductions: Record<string, never>;
        };
        PayrollListWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["Payroll"][];
            meta?: components["schemas"]["MetaPagination"];
        };
        GeneratePayrollRequest: {
            items?: components["schemas"]["PayrollItemInput"][];
        };
        PayrollItemInput: {
            /** Format: uuid */
            employeeId: string;
            grossAmount: number;
            deductions?: Record<string, never>;
        };
        ProfileUpdateRequest: {
            /** Format: email */
            email?: string;
            newPassword?: string;
        };
        ReportRequest: {
            /**
             * @example PAYROLL
             * @enum {string}
             */
            type: "PAYROLL" | "EMPLOYEES" | "USERS";
            /**
             * @example PDF
             * @enum {string}
             */
            format: "PDF" | "CSV" | "XLSX";
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** Format: uuid */
            department?: string;
        };
        ReportResponse: {
            /** @example https://tu-dominio.com/files/report-123.pdf */
            downloadUrl: string;
            /** @example reporte-payroll-oct-2025.pdf */
            filename: string;
            /** @example application/pdf */
            mimeType?: string;
            /** @example 1048576 */
            size?: number;
        };
        ReportResponseWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["ReportResponse"];
        };
        ReportTemplate: {
            /** @example payroll-summary */
            id?: string;
            /** @example Resumen de Nómina */
            name?: string;
            description?: string;
        };
        ReportTemplateListWrapper: components["schemas"]["SuccessResponse"] & {
            data?: components["schemas"]["ReportTemplate"][];
        };
    };
    responses: {
        /** @description No autenticado o token inválido */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description No tiene permisos para esta acción */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Recurso no encontrado */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErrorResponse"];
            };
        };
        /** @description Error de validación */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ValidationError"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
